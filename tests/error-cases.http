# Tests d'erreurs et de cas limites pour la fonction Azure MCP Server
# Ces tests vÃ©rifient la gestion des erreurs et des cas d'usage extrÃªmes

@baseUrl = http://localhost:7071
@functionName = mcpserver

###
# Test d'erreur 1: RequÃªte sans Content-Type
POST {{baseUrl}}/api/{{functionName}}

{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "test"
}

###
# Test d'erreur 2: JSON malformÃ© - accolade manquante
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 2,
  "method": "test"
}
###
# Test d'erreur 3: JSON malformÃ© - virgule supplÃ©mentaire
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 3,
  "method": "test",
}

###
# Test d'erreur 4: RequÃªte avec caractÃ¨res spÃ©ciaux
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 4,
  "method": "test_special_chars",
  "params": {
    "message": "Test avec caractÃ¨res spÃ©ciaux: Ã Ã©Ã¨ÃªÃ«Ã®Ã¯Ã´Ã¶Ã¹Ã»Ã¼Ã¿Ã±Ã§",
    "unicode": "ðŸš€ðŸ”¥ðŸ’¯",
    "symbols": "!@#$%^&*()_+-=[]{}|;:,.<>?"
  }
}

###
# Test d'erreur 5: RequÃªte avec ID null
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": null,
  "method": "test_null_id"
}

###
# Test d'erreur 6: RequÃªte sans ID
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "method": "test_no_id"
}

###
# Test d'erreur 7: RequÃªte avec version JSON-RPC invalide
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "1.0",
  "id": 7,
  "method": "test_invalid_version"
}

###
# Test d'erreur 8: RequÃªte sans method
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 8,
  "params": {
    "test": "no method"
  }
}

###
# Test d'erreur 9: RequÃªte avec method vide
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 9,
  "method": "",
  "params": {}
}

###
# Test d'erreur 10: RequÃªte avec Content-Type incorrect
POST {{baseUrl}}/api/{{functionName}}
Content-Type: text/plain

{
  "jsonrpc": "2.0",
  "id": 10,
  "method": "test_wrong_content_type"
}

###
# Test d'erreur 11: RequÃªte avec body trÃ¨s long (pour tester les limites)
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 11,
  "method": "test_very_long_body",
  "params": {
    "very_long_string": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem."
  }
}

###
# Test d'erreur 12: RequÃªte avec caractÃ¨res de contrÃ´le
POST {{baseUrl}}/api/{{functionName}}
Content-Type: application/json

{
  "jsonrpc": "2.0",
  "id": 12,
  "method": "test_control_chars",
  "params": {
    "message": "Test avec caractÃ¨res de contrÃ´le: \t\n\r\b\f"
  }
}
